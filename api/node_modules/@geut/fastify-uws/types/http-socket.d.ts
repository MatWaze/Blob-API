export class HTTPSocket extends EventEmitter<string | symbol, any> {
    constructor(server: any, res: any, writeOnly: any);
    aborted: boolean;
    writableNeedDrain: boolean;
    bytesRead: number;
    bytesWritten: number;
    writableEnded: boolean;
    errored: any;
    get readyState(): "open" | "readOnly" | "writeOnly" | "opening";
    get writable(): boolean;
    get readable(): boolean;
    get encrypted(): boolean;
    get remoteAddress(): any;
    get remoteFamily(): "IPv4" | "IPv6";
    get destroyed(): boolean;
    address(): any;
    abort(): void;
    setEncoding(encoding: any): void;
    destroy(err: any): void;
    onRead(cb: any): any;
    end(data: any, _: any, cb?: () => void): void;
    write(data: any, _: any, cb?: () => void): boolean | void;
    _clearTimeout(): void;
    [kServer]: any;
    [kRes]: any;
    [kWriteOnly]: any;
    [kReadyState]: {
        read: boolean;
        write: boolean;
    };
    [kEncoding]: any;
    [kRemoteAdress]: any;
    [kUwsRemoteAddress]: any;
    [kHead]: any;
    [kClientError]: boolean;
    [kTimeoutRef]: NodeJS.Timeout;
}
import { EventEmitter } from 'eventemitter3';
import { kServer } from './symbols.js';
import { kRes } from './symbols.js';
import { kWriteOnly } from './symbols.js';
import { kReadyState } from './symbols.js';
import { kEncoding } from './symbols.js';
import { kRemoteAdress } from './symbols.js';
import { kUwsRemoteAddress } from './symbols.js';
import { kHead } from './symbols.js';
import { kClientError } from './symbols.js';
import { kTimeoutRef } from './symbols.js';
