generator client {
	provider		= "prisma-client-js"
	binaryTargets	= ["native", "debian-openssl-3.0.x"]
}

datasource db {
	provider	= "sqlite"
	url			= "file:./data.db"
}

model User {
	id				String			@id @default(uuid())
	username		String
	email			String			@unique
	password		String?
	walletAddress	String?
	withdrawAmount	Decimal?		@default(0.0)
	isDeleted		Boolean?		@default(false)
	authMethod		String?
	emailVerified	EmailVerified?	@relation("UserToEmailVerified")
	participations	Participation[]
	friendships		Friendship[]
}

model Friendship {
	id				String		@id @default(uuid())
	status			String		@default("PENDING") // "PENDING", "ACCEPTED", "REJECTED", "BLOCKED"
	createdAt		DateTime	@default(now())
	updatedAt		DateTime	@updatedAt
	
	user1Id			String
	user2Id			String
	initiatorId		String
	
	user1			User		@relation(fields: [user1Id], references: [id], onDelete: Cascade)
	
	@@unique([user1Id, user2Id])
	@@index([user2Id])
}

model EmailVerified {
	id			String		@id @default(uuid())
	nonce		String?
	isVerified	Boolean		@default(false)
	user		User		@relation("UserToEmailVerified",fields: [userId], references: [id], onDelete: Cascade)
	userId		String		@unique
}

model Game {
	id			Int				@id @default(autoincrement())
	name		String // e.g., "Game1", "Game2"
	placements	Placement[] // Placements specific to this game
	tournaments	Tournament[] // Tournaments associated with this game
}

model Placement {
	id				Int				@id @default(autoincrement())
	name			String // e.g., "1st Place", "Runner-Up", etc.
	gameId			Int
	game			Game			@relation(fields: [gameId], references: [id])
	participations	Participation[] // Placements achieved by users in tournaments
}

model Tournament {
	id				Int				@id @default(autoincrement())
	createdAt		DateTime		@default(now())
	gameId			Int
	game			Game			@relation(fields: [gameId], references: [id])
	participations	Participation[] // Users participating in this tournament
}

model Participation {
	id				Int			@id @default(autoincrement())
	userId			String
	tournamentId	Int
	placementId		Int?
	user			User		@relation(fields: [userId], references: [id])
	tournament		Tournament	@relation(fields: [tournamentId], references: [id])
	placement		Placement?	@relation(fields: [placementId], references: [id])
}

model Session {
	id				String	@id @default(uuid())
	sessionId		String	@unique
	userId			String
	username		String
	email			String
	accessToken		String
	refreshToken	String
}